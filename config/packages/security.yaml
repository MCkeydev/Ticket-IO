security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\Technicien
        property: email
    app_user2_provider:
      entity:
        class: App\Entity\Operateur
        property: email
    app_user3_provider:
      entity:
        class: App\Entity\User
        property: email
    all_users:
      chain:
        providers: [ 'app_user_provider', 'app_user2_provider', 'app_user3_provider' ]
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: all_users
      custom_authenticator: App\Security\LoginFormAuthenticator
      logout:
        path: app_logout
        # where to redirect after logout
        # target: app_any_route

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  role_hierarchy:
    ROLE_USER: [ ROLE_TICKET_FETCH ]
    ROLE_OPERATOR: [ ROLE_TICKET ]
    ROLE_TECHNICIEN: [ ROLE_TICKET_FETCH ]
    ROLE_TICKET: [ ROLE_TICKET_CREATE, ROLE_TICKET_MODIFY, ROLE_TICKET_DELETE, ROLE_TICKET_FETCH ]
    ROLE_DEV: [ ROLE_USER, ROLE_CREATE_TICKET, ROLE_DELETE_TICKET ]
    ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
  # Ici on remarque que si l'utilisateur n'a pas le role admin, il n'accede pas Ã  toutes les routes
  # qui commencent par /admin/get
    - { path: ^/login, roles: PUBLIC_ACCESS }
    - { path: ^/dev, roles: ROLE_DEV }
    - { path: ^/admin, roles : ROLE_ADMIN }
    - { path: ^/, roles: [ ROLE_OPERATEUR, ROLE_TECHNICIEN, ROLE_USER, ROLE_ADMIN ]}
  # - { path: ^/profile, roles: ROLE_USER }
when@dev:
  security:
    role_hierarchy:
      ROLE_ADMIN: [ ROLE_USER, ROLE_CREATE_TICKET, ROLE_DELETE_TICKET ]
      ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
      ROLE_DEV: [ ROLE_ADMIN, ROLE_SUPER_ADMIN ]
when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
